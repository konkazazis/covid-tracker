{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","toolTips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3842ca5d.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoBox.css';\nimport {Card, CardContent, Typography} from '@material-ui/core';\n\nfunction InfoBox({title, cases, active,isRed,total, ...props}) {\n    return (\n        <Card\n        onClick={props.onClick} \n        className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className='infoBox__title' color='textSecondary'>{title}</Typography>\n\n                <h2 className='infoBox__cases'>{cases}</h2>\n\n                <Typography className='infoBox__total' color='textPrimary'>\n                    {total} Total\n                </Typography>\n\n            </CardContent>            \n        </Card>\n    );\n}\n\nexport default InfoBox\n","import React from 'react';\nimport numeral from 'numeral';\nimport {Circle , Popup} from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n        hex: '#CC1034',\n        rgb: \"rgb(204, 16, 52)\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex:'#7dd71d',\n        rgb: \"rgb(125, 215, 29)\",\n        half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: '#fb4443',\n        rgb: \"rgb(251, 68, 67)\",\n        half_op: \"rgba(251, 68, 67, 0.5)\",\n        multiplier: 2000,\n    },\n};\n\n\nexport const sortData = (data) => {\n    let sortedData = [...data];\n\n    sortedData.sort((a,b) => {\n        if (a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    });\n    return sortedData;\n};\n\nexport const prettyPrintStat = (stat) => \n    stat ? `+${numeral(stat).format('0.0a')}` : '+0';\n\n\nexport const showDataOnMap = (data, casesType='cases') => \n    data.map((country) => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius= {\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className='info-container'>\n                    <div \n                    className='info-flag'\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})`}}/>\n                    <div className='info-name'>{country.country}</div>\n                    <div className='info-confirmed'>Cases: {numeral(country.cases).format('0,0')}</div>\n                    <div className='info-recovered'>Recovered: {numeral(country.recovered).format('0,0')}</div>\n                    <div className='info-deaths'>Deaths: {numeral(country.deaths).format('0,0')}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ));\n","import React from 'react';\nimport './Map.css';\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\nimport {showDataOnMap} from './util';\n\nfunction Map({countries, casesType,center,zoom}) {\n    return (\n        <div className='map'>\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer \n                    url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">\n                    OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map;\n","import React from 'react'\nimport './Table.css'\nimport numeral from 'numeral';\n\nfunction Table({countries}) {\n    return (\n        <div className='table'>\n           {countries.map(({country, cases}) => (\n               <tr>\n                   <td>{country}</td>\n                   <td><strong>{numeral(cases).format()}</strong></td>\n               </tr>\n           ))} \n        </div>\n    );\n}\n\nexport default Table;\n","import React, {useState, useEffect} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    toolTips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format('+0,0');\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: 'time',\n                time: {\n                    format: 'MM/DD/YY',\n                    tooltipFormat: 'll',\n                },\n            },    \n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format('0a');\n                    },\n                },\n            },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for(let date in data.cases) {\n        if (lastDataPoint) {\n           let newDataPoint = {\n               x: date,\n               y: data[casesType][date] - lastDataPoint,\n           };\n           chartData.push(newDataPoint);\n\n        }\n        lastDataPoint = data[casesType][date];\n    };\n    return chartData;\n};\n\nfunction LineGraph({casesType}) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                });\n        };\n        fetchData();\n    }, [casesType]);\n    \n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line \n                    data={{\n                        datasets: [{\n                            backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                            borderColor: '#CC1034',\n                            data: data,\n                        }],\n                    }}\n                    options= {options}\n                />    \n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, {useEffect, useState} from 'react';\nimport {MenuItem, FormControl,Select, Card, CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from 'numeral';\n\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = \n  useState({lat:34.80746, lng:-40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json()\n    .then(data => {\n      setCountryInfo(data);\n    }));\n  }, []);\n \n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((response) => response.json())\n      .then((data) => {\n        const countries =  data.map((country) => (\n          {\n          name: country.country ,\n          value: country.countryInfo.iso2\n          }\n        ));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setCountries(countries);\n        setMapCountries(data);\n      });\n    };\n    getCountriesData();\n  },[]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = \n      countryCode === 'worldwide' \n        ? 'https://disease.sh/v3/covid-19/all' \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country} >\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              \n            </Select>\n          </FormControl>\n        </div>  \n        <div className='app__stats'>\n                <InfoBox \n                isRed\n                active={casesType ==='cases'}\n                onClick={(e) => setCasesType('cases')}\n                title='Coronavirus cases' \n                cases={prettyPrintStat(countryInfo.todayCases)} \n                total={numeral(countryInfo.cases).format()}\n                />\n                <InfoBox title='Recovered' \n                active={casesType ==='recovered'}\n                onClick={(e) => setCasesType('recovered')}\n                cases={prettyPrintStat(countryInfo.todayRecovered)} \n                total={numeral(countryInfo.recovered).format()}\n                />\n                <InfoBox title='Deaths' \n                isRed\n                active={casesType ==='deaths'}\n                onClick={(e) => setCasesType('deaths')}\n                cases={prettyPrintStat(countryInfo.todayDeaths)} \n                total={numeral(countryInfo.deaths).format()}\n                />\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n\n      </div>\n      \n      <Card className='app__right'>\n        <CardContent>\n                <h3>Live Cases by Country</h3>\n                <Table countries={tableData} />\n                <h3>Worldwide new {casesType} </h3>\n                <LineGraph casesType={casesType} />\n        </CardContent>\n\n       </Card>          \n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}